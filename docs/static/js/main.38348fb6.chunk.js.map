{"version":3,"sources":["Components/CategoryAdd.js","Helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpert.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpert","item","i","ReactDOM","render","document","getElementById"],"mappings":"mNA+BeA,EA5BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACDC,mBAAS,cADR,mBAC9BC,EAD8B,KAClBC,EADkB,KAUrC,OACI,uBAAMC,SARW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAO,GACjBP,GAAc,SAAAQ,GAAU,OAAIN,GAAJ,mBAAmBM,QAK/C,UACI,8CAEA,uBACIC,KAAK,OACLC,MAAOR,EACPS,SAAU,SAACN,GACPF,EAAcE,EAAEO,OAAOF,c,4CCrB9BG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,0FAC4EC,UAAUH,GADtF,sBAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAGFC,EAAOD,EAAKE,KAAI,SAAAC,GAElB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAXtB,kBAeZM,GAfY,4CAAH,sDCYLO,EAVK,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAE7B,OACI,sBAAKc,UAAU,uBAAf,UACI,6BAAKJ,IACL,qBAAKK,IAAKf,EAAKgB,IAAKN,QCuBjBO,EAxBC,SAAC,GAAkB,IAAD,ECHN,SAACnB,GAAY,IAAD,EAEVb,mBAAS,CAC/BoB,KAAK,GACLa,SAAQ,IAJwB,mBAE7BC,EAF6B,KAEtBC,EAFsB,KAgBpC,OATAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAC,GACnBH,EAAS,CACLf,KAAMkB,EACNL,SAAQ,SAGjB,IAEIC,EDViBK,CAHM,EAAf1B,UAGRO,EAHuB,EAGvBA,KAAMa,EAHiB,EAGjBA,QAEb,OACI,qCACC,0CAECA,GAAW,mBAAGJ,UAAU,QAAb,wBACZ,qBAAKA,UAAU,YAAf,SAEOT,EAAKE,KAAI,SAAAC,GACL,OAAO,cAAC,EAAD,eAECA,GADCA,EAAIC,aEOlBgB,EAvBG,WAAO,IAAD,EAEgBxC,mBAAS,CAAC,YAAa,YAAa,gBAFpD,mBAEbO,EAFa,KAEDR,EAFC,KAIpB,OACI,qCACI,2CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQQ,EAAWe,KAAI,SAACmB,EAAMC,GAAP,OACX,cAAC,EAAD,CAEA7B,SAAW4B,GADJA,YCb/BE,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.38348fb6.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CategoryAdd = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('Hola mundo');\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(inputValue.length>0){\r\n            setCategories(categories=> [inputValue, ...categories]);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <h2>Add Category</h2>\r\n\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={(e) => {\r\n                    setInputValue(e.target.value);\r\n                }}\r\n            />\r\n        </form>\r\n    )\r\n}\r\nCategoryAdd.propTypes ={\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CategoryAdd\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=FHOCJu1KI0YKS4g0bYAorWFc4BV5oVR6&q=${encodeURI(category)}&limit=10`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n\r\n    const gifs = data.map(img => {\r\n\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nconst GifGridItem = ({id, title, url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__fadeIn\">\r\n            <h3>{title}</h3>\r\n            <img src={url} alt={title}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import { findByDisplayValue } from '@testing-library/dom';\r\nimport React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n//import { getGifs } from '../Helpers/getGifs';\r\n import GifGridItem from \"./GifGridItem\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n    //const [images, setImages] = useState([]);\r\n\r\n    const {data, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n         <h3>Category</h3>\r\n\r\n         {loading && <p className=\"flash\">Loading...</p>}\r\n         <div className=\"card-grid\">\r\n            {\r\n                data.map(img => {\r\n                    return <GifGridItem\r\n                        key={img.id}\r\n                        {...img}\r\n                    />\r\n                })\r\n            }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../Helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category)=>{\r\n\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then(imgs=>{\r\n            setstate({\r\n                data: imgs,\r\n                loading:false\r\n            });\r\n        });\r\n    }, [])\r\n\r\n    return state;\r\n}","import React, {useState} from 'react';\r\nimport  CategoryAdd from \"./Components/CategoryAdd\";\r\nimport  GifGrid from \"./Components/GifGrid\";\r\n\r\nconst GifExpert = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch', 'Samurai X', 'Dragon Ball']);\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpert</h2>\r\n            <CategoryAdd setCategories={setCategories}/>\r\n            <hr />\r\n\r\n            <ul>\r\n                {\r\n                    categories.map((item, i) => \r\n                        <GifGrid \r\n                        key = {item}\r\n                        category ={item}/>\r\n                    )\r\n                }\r\n            </ul>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpert;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpert from './GifExpert';\n\nReactDOM.render(\n  <GifExpert/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}